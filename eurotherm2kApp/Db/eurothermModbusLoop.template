# Template for register based communications
# Instantiate once per loop - the device prefix and suffix combination must be unique for each loop

# Notes:
# Controller must be set to full resolution (Comms->H module->Resolution)
# The desired number of decimal places must also be set on the controller (Standard I/O->PV Input->Resolution):
# either XXX.XX or XXXX.X.  This must match the setting of the PREC macro.
# The decimal point is inferred, hence 25.01 is transmitted as 2501 which is converted using ASLO factor.
# If two decimal places are required the maximum value that can be set is 327.66 
# Also ensure that the Proportional Band units are set to 'Engineer units'

# % macro, P, Device prefix
# % macro, Q, Device suffix
# % macro, PORT, Asyn port
# % macro, ADDR, Modbus address
# % macro, LOOP, Loop number, default 1
# % macro, SPMIN, Minimum setpoint
# % macro, SPMAX, Maximum setpoint
# % macro, RRMAX, Maximum ramp rate
# % macro, PREC, Setpoint precision, must match controller setup
# % macro, EGUT, Engineering units for SP & RBV, etc, default is C
# % macro, EGU, Engineering units for ramp rate, default is C/s
# % macro, gda_name, Name to export to gda as
# % macro, gda_desc, Description for gda
# % macro, name, Object and gui association name

# This associates an edm screen with the template
# % gui, $(name=), edm, eurotherm2k_modbus.edl, P=$(P),Q=$(Q)

# % gdatag,template,eurotherm2k,$(gda_name=),$(gda_desc=)

# should get this from eurothermModbus, but just in case define it here too...
record(bo, "$(P)$(Q):DISABLE") {
  field(ZNAM, "Enabled")
  field(ONAM, "Disabled")
}

# PV: address 1
# % gdatag,pv,ro,$(gda_name=),PVRBV
# % archiver 1 Monitor
record(ai, "$(P)$(Q):PV:RBV") {
  field(DESC, "Temperature Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PV,0,1000)MODBUS_DATA")
  field(EGU, "$(EGUT=C)")
  field(SCAN, "I/O Intr")
}

# Target setpoint: address 2
#% gdatag,pv,rw,$(gda_name=),SP
# % autosave 2 VAL
record(ao, "$(P)$(Q):SP") {
  field(DESC, "Setpoint")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_PV,1,1000)MODBUS_DATA")
  field(EGU, "$(EGUT=C)")
  field(DRVH, "$(SPMAX=1000)")
  field(DRVL, "$(SPMIN=-273)")
  field(ASLO, "0.1")
}

# % gdatag,pv,ro,$(gda_name=),SPRBV
# % archiver 10 Monitor
record(ai, "$(P)$(Q):SP:RBV") {
  field(DESC, "Setpoint Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PV,1,1000)MODBUS_DATA")
  field(EGU, "$(EGUT=C)")
  field(SCAN, "I/O Intr")
  field(ASLO, "0.1")  
}

# Target output power (manual mode): address 3
#% gdatag,pv,rw,$(gda_name=),O
# % autosave 2 VAL
record(ao, "$(P)$(Q):O") {
  field(DESC, "Output")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_PV,2,1000)MODBUS_DATA")
  field(EGU, "%")
  field(DRVH, "100")
  field(DRVL, "-100")
  field(ASLO, "0.1")
  field(PREC, "1")
}

# % gdatag,pv,ro,$(gda_name=),ORBV
# % archiver 1 Monitor
record(ai, "$(P)$(Q):O:RBV") {
  field(DESC, "Output Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PV,2,1000)MODBUS_DATA")
  field(EGU, "%")
  field(SCAN, "I/O Intr")
  field(ASLO, "0.1")
  field(PREC, "1")
}

# Ramp rate: address 37
#% gdatag,pv,rw,$(gda_name=),RR
# % autosave 2 VAL
record(ao, "$(P)$(Q):RR") {
  field(DESC, "Ramprate")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_RR,0,1000)MODBUS_DATA")
  field(EGU, "$(EGU=C/s)")
  field(DRVH, "$(RRMAX=1)")
  field(DRVL, "0")
}

# % gdatag,pv,ro,$(gda_name=),RRRBV
# % archiver 10 Monitor
record(ai, "$(P)$(Q):RR:RBV") {
  field(DESC, "Ramprate Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_RR,0,1000)MODBUS_DATA")
  field(EGU, "$(EGU=C/s)")
  field(SCAN, "I/O Intr")
}

# Manual mode: address 273
# % autosave 2 VAL
record(bo, "$(P)$(Q):MAN") {
  field(DESC, "Manual mode enable")
  field(DTYP, "asynUInt32Digital")
  field(OUT, "@asynMask(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_MAN,0,1,1000)MODBUS_DATA")
  field(ZNAM, "Automatic")
  field(ONAM, "Manual")
}

# % archiver 10 Monitor
record(bi, "$(P)$(Q):MAN:RBV") {
  field(DESC, "Manual mode readback")
  field(DTYP, "asynUInt32Digital")
  field(INP, "@asynMask(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_MAN,0,1,1000)MODBUS_DATA")
  field(ZNAM, "Automatic")
  field(ONAM, "Manual")
  field(SCAN, "I/O Intr")
}

# Proportional gain term: address 351
# Note this must be set to operate engineering units (not %) for the precision to be correct
# otherwise it is a fixed precision of 1 decimal place
#% gdatag,pv,rw,$(gda_name=),P
# % autosave 2 VAL
record(ao, "$(P)$(Q):P") {
  field(DESC, "P Param")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_PID,0,1000)MODBUS_DATA")
  field(VAL, "150")
}

# % gdatag,pv,ro,$(gda_name=),PRBV
# % archiver 10 Monitor
record(ai, "$(P)$(Q):P:RBV") {
  field(DESC, "P Param Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PID,0,1000)MODBUS_DATA")
  field(SCAN, "I/O Intr")
}

# Integral gain term: address 352
#% gdatag,pv,rw,$(gda_name=),I
# % autosave 2 VAL
record(ao, "$(P)$(Q):I") {
  field(DESC, "I Param")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_PID,1,1000)MODBUS_DATA")
  field(PREC, "1")
  field(VAL, "28")
  field(ASLO, "0.1")
}

# % gdatag,pv,ro,$(gda_name=),IRBV
# % archiver 10 Monitor
record(ai, "$(P)$(Q):I:RBV") {
  field(DESC, "I Param Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PID,1,1000)MODBUS_DATA")
  field(PREC, "1")
  field(SCAN, "I/O Intr")
  field(ASLO, "0.1")
}

# Derivative gain term: address 353
#% gdatag,pv,rw,$(gda_name=),D
# % autosave 2 VAL
record(ao, "$(P)$(Q):D") {
  field(DESC, "D Param")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Wr_PID,2,1000)MODBUS_DATA")
  field(PREC, "1")
  field(VAL, "4")
  field(ASLO, "0.1")
}

# % gdatag,pv,ro,$(gda_name=),DRBV
# % archiver 10 Monitor
record(ai, "$(P)$(Q):D:RBV") {
  field(DESC, "D Param Readback")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(Eurotherm_$(PORT)_$(ADDR)_$(LOOP=1)_Rd_PID,2,1000)MODBUS_DATA")
  field(PREC, "1")
  field(SCAN, "I/O Intr")
  field(ASLO, "0.1")
}

# Record to switch between full resolution (2 decimal places) and reduced resolution (1 decimal place) which
# allows values larger than 327.66 to be transferred.
# % autosave 2 VAL
record(mbbo, "$(P)$(Q):PREC") {
	field(ZRST, "1 Decimal Place")
	field(ONST, "2 Decimal Places")
	field(ZRVL, "1")
	field(ONVL, "2")
	field(FLNK, "$(P)$(Q):SETASLO")
	field(RVAL, "$(PREC)")
	field(PINI, "YES")
}

# Use ASLO of 0.01 if 2 decimal places required, otherwise 0.1
record(calcout, "$(P)$(Q):CALCASLO") {
	field(INPA, "$(P)$(Q):PREC.RVAL NPP")
	field(CALC, "A==1?0.1:0.01")
}

record(dfanout, "$(P)$(Q):SETASLO") {
	field(OMSL, "closed_loop")
	field(DOL, "$(P)$(Q):CALCASLO PP")
	field(OUTA, "$(P)$(Q):SP.ASLO")
	field(OUTB, "$(P)$(Q):SP:RBV.ASLO")
	field(OUTC, "$(P)$(Q):RR.ASLO")
	field(OUTD, "$(P)$(Q):RR:RBV.ASLO")
	field(OUTE, "$(P)$(Q):PV:RBV.ASLO")
	field(OUTF, "$(P)$(Q):P.ASLO")
	field(OUTG, "$(P)$(Q):P:RBV.ASLO")
	field(FLNK, "$(P)$(Q):SETPREC")
}

record(dfanout, "$(P)$(Q):SETPREC") {
	field(OMSL, "closed_loop")
	field(DOL, "$(P)$(Q):PREC.RVAL")
	field(OUTA, "$(P)$(Q):SP.PREC PP")
	field(OUTB, "$(P)$(Q):SP:RBV.PREC PP")
	field(OUTC, "$(P)$(Q):RR.PREC PP")
	field(OUTD, "$(P)$(Q):RR:RBV.PREC PP")
	field(OUTE, "$(P)$(Q):PV:RBV.PREC PP")
	field(OUTF, "$(P)$(Q):P.PREC PP")
	field(OUTG, "$(P)$(Q):P:RBV.PREC PP")
}
